Optimization Ideas
------------------

Time:
- Overall
	DONE - Change ArrayLists to HashSets. Not really sure why I went with ArrayList over HashSet in the first place, I guess I wasn't
	  thinking about it. Hopefully this makes a big difference. 
- getAnnulus():
	UNNECESSARY - Getting an annulus takes a really fucking long time. Since every time getAnnulus() is called, it is called multiple times from
	  the same center with a growing radius, we can change the function to instead return a sequence of growing annuli from a point.
	  That way we don't have to reiterate over the same range of points to get annuli with the same center. 
- getNumProtrusions():
	- Go find out why getting protrusions is taking so much longer for different images. It might have something to do with the
	  thickness of the strands varying across different images, which would cause many more circles to be generated for every point.
	  Could also do with higher pixel density on different images, which could be accounting for by just throwing some pixels out, or
	  averaging some and throwing the others out. 
- getEndpoints():
	- Do a random sampling of points when searching for the next endpoint, instead of searching through all possible endpoints.
	- Find a different, faster way to cluster the possible endpoints. May not be as important, since finding endpoints doesn't seem to take too long. 

Accuracy:
- getNumProtrusions():
	UNNECESSARY - When the number of components of annulus intersect pixels is calculated, the result can be thrown off since the pixels
	  only occur at discrete points, so sometimes what should be a single component is inconveniently split into multiple components.
	  To fix this, we can possibly just combine components that are very close to each other. 
	DONE - Instead of taking the intersection of annulus with pixels, then finding number of connected components (getting annulus and finding
	  num connected components for every single point takes way too fucking long), do this: For a given point, let a radius grow from 1. For
	  any given radius, travel along the circle centered at the point with that radius, and count the number of times the circle switches from
	  inside pixels to outside pixels. Divide by 2, and that gives the same information as the number of connected components of an annulus of the
	  same radius. Let the radius grow until less than some threshold value of the circle is outside pixels. 
	UNNECESSARY - There are several constants involved with calculating the number of protrusions:
		- P_WINDOW
		- INITIAL_RADIUS
		- RADIUS_STEP1
		- RADIUS_STEP2
	  And there will also be another constant once the smoothing of close components mentioned earlier is implemented, to dicate
	  the threshold for how close components must be to be merged. Maybe more will be added later after more optimization. We could
	  possibly implement a machine learning component to optimize the values of these variables. Though that would require lots more 
	  time to implement, as well as lots of training examples and stuff. Plus, if it were going for accuracy, then the radius step 
	  values should probably just converge to 1. This leaves only 3 (maybe a couple more at most) variables, and at that point I'm 
	  not really sure if it's worth it. Well see the final performance and then come back to this. Although this would've been cool, 
	  after making other improvements, I can see that there is no need for this. 
- getEndpoints():
	- The current method for finding endpoints from the set of points with 1 protrusion is questionable. It works when getProtrusions works without
	  hiccups, but if there are too many points (or maybe even any points) that return 1 protrusion but aren't near an endpoint, the current method 
	  for finding endpoints will be completely fucked. One solution is to use the current method to find a set of points which can then be used as 
	  the initial centroids in a k-means clustering, though I'm not sold that this won't also be fucked. Another possible solution is to verify each
	  choice of endpoint by pairing the endpoints by distance when throughout the process of choosing endpoints. Another possible solution which would
	  be easy to implement would be to "smooth out" the 1-protrusion points, then keep the current method. Since we just want to eliminate those points
	  that are identified with 1 protrusion but are isolated, we can just change the number of protrusions of a point to be the average of the 3x3 square
	  encompassing that point, then round. This may eliminate isolated points. Even if we don't keep the current method, I think this smoothing might
	  help in general. 
